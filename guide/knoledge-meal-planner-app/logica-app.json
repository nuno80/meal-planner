{
  "summary": "Implementate la gestione utenti, preferenze, ricette, generazione di piani, modifica di un singolo pasto e visualizzazione dell'ultimo piano.",
  "features": {
    "user_authentication_preferences": {
      "purpose": "Gestire il profilo utente e le sue preferenze per la generazione dei piani.",
      "flow": [
        "1. L'utente si autentica tramite Clerk.",
        "2. Accede alla pagina `/profile` per impostare o modificare le sue preferenze.",
        "3. La pagina carica le preferenze esistenti via `GET /api/user/preferences`.",
        "4. Al salvataggio, il form invia i dati con `PUT` a `/api/user/preferences`.",
        "5. L'API valida i dati e li salva nel DB (logica UPSERT)."
      ]
    },
    "recipe_management": {
      "purpose": "Integrare e visualizzare il catalogo di ricette esistente.",
      "flow": [
        "1. Uno script di seeding (`db:seed`) importa le ricette da un DB esterno.",
        "2. La pagina `/recipes` mostra una galleria di tutte le ricette.",
        "3. La pagina `/recipes/[recipeId]` mostra i dettagli di una singola ricetta."
      ]
    },
    "meal_plan_generation_and_history": {
      "purpose": "Generare, salvare e visualizzare i piani alimentari dell'utente.",
      "flow": [
        "1. L'utente clicca 'Genera Nuovo Piano' sulla pagina `/meal-plan`.",
        "2. L'API `/api/meal-plan/generate` viene chiamata, esegue l'algoritmo e salva il piano nel DB.",
        "3. L'utente naviga a `/user-dashboard` (Mio Piano).",
        "4. La pagina (Server Component) interroga il DB per trovare l'ID dell'ultimo piano creato dall'utente.",
        "5. Se un piano viene trovato, vengono recuperati tutti i suoi giorni e pasti associati.",
        "6. I dati vengono passati al componente Client `MealPlanDisplay` per la visualizzazione.",
        "7. Se nessun piano viene trovato, viene mostrato un invito a generarne uno."
      ]
    },
    "meal_plan_customization": {
      "purpose": "Permettere all'utente di modificare un piano alimentare generato.",
      "flow": [
        "1. Nella visualizzazione del piano, ogni pasto ha un'icona 'sostituisci'.",
        "2. Al click, il frontend chiama l'API `PATCH /api/meal-plan/meal/[mealId]`.",
        "3. L'API verifica che l'utente sia il proprietario del piano e aggiorna il `recipe_id` per quel pasto.",
        "4. Il frontend aggiorna lo stato locale per mostrare la modifica senza ricaricare la pagina."
      ]
    }
  },
  "api_calls": [
    {
      "endpoint": "GET /api/user/preferences",
      "description": "Recupera le preferenze salvate per l'utente autenticato.",
      "security": "Protetto da `clerkMiddleware`."
    },
    {
      "endpoint": "PUT /api/user/preferences",
      "description": "Crea/aggiorna le preferenze dell'utente.",
      "security": "Protetto da `clerkMiddleware`. Valida il payload con Zod."
    },
    {
      "endpoint": "POST /api/meal-plan/generate",
      "description": "Innesca la generazione e il salvataggio di un nuovo piano alimentare.",
      "security": "Protetto da `clerkMiddleware`."
    },
    {
      "endpoint": "PATCH /api/meal-plan/meal/[mealId]",
      "description": "Sostituisce una ricetta specifica all'interno di un piano esistente.",
      "security": "Protetto da `clerkMiddleware`. Verifica la propriet√† del piano."
    }
  ],
  "architecture_summary": "Architettura basata su Next.js App Router. Clerk per l'autenticazione. Database SQLite gestito con `better-sqlite3`. Le interazioni avvengono tramite API Routes che chiamano servizi di logica di business riutilizzabili."
}
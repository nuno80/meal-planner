{
  "last_update": "2024-05-24T12:00:00Z",
  "task_completed": "SHOPPING_LIST - 5. Lista della Spesa",
  "summary": "Implementate gestione utenti, preferenze, ricette (con preferiti e cancellazione admin), un flusso di generazione piani server-side e una lista della spesa configurabile.",
  "features": {
    "user_and_recipe_interaction": {
      "purpose": "Permettere agli utenti di interagire con il catalogo delle ricette.",
      "flow": [
        "1. L'utente naviga alla pagina `/recipes`.",
        "2. La pagina (Server Component) recupera tutte le ricette e la lista dei preferiti dell'utente loggato.",
        "3. Ogni `RecipeCard` (Client Component) mostra un'icona a forma di cuore, piena se la ricetta è tra i preferiti.",
        "4. Al click sul cuore, il componente chiama l'API `POST /api/recipes/[recipeId]/favorite` che aggiunge/rimuove il record dal DB e aggiorna l'UI.",
        "5. Se l'utente è admin, vede un'icona cestino. Al click, viene chiamata l'API `DELETE /api/recipes/[recipeId]` che cancella la ricetta dal DB e la card scompare dall'UI."
      ]
    },
    "meal_plan_creation_flow": {
      "purpose": "Unificare il processo di impostazione preferenze e generazione del piano.",
      "flow": [
        "1. L'utente naviga a `/meal-plan/create`.",
        "2. Il `PreferencesForm` carica le ultime preferenze salvate dall'utente tramite `GET /api/user/preferences`.",
        "3. L'utente modifica le preferenze e clicca 'Genera il Mio Piano'.",
        "4. Il form salva le preferenze aggiornate con `PUT /api/user/preferences`.",
        "5. Subito dopo, il form reindirizza l'utente a una nuova URL con le preferenze codificate come parametri, es. `/meal-plan/generate?calorieTarget=2000&...`.",
        "6. La pagina `/meal-plan/generate` (Server Component) legge i parametri, esegue la logica di generazione e salvataggio del piano direttamente sul server.",
        "7. La pagina visualizza il piano appena creato."
      ]
    },
    "meal_plan_history_and_customization": {
      "purpose": "Visualizzare l'ultimo piano e permettere piccole modifiche.",
      "flow": [
        "1. L'utente naviga a `/user-dashboard` (Mio Piano).",
        "2. La pagina (Server Component) recupera dal DB l'ultimo piano salvato dall'utente.",
        "3. I dati vengono passati al componente `MealPlanDisplay` per la visualizzazione.",
        "4. L'utente può cliccare l'icona 'sostituisci' su un pasto, che chiama l'API `PATCH /api/meal-plan/meal/[mealId]` per aggiornare la ricetta nel DB."
      ]
    },
    "flexible_shopping_list_generator": {
      "feature_name": "Generatore Lista della Spesa Flessibile",
      "summary": "Permette agli utenti di generare una lista della spesa aggregata a partire dal loro ultimo piano alimentare. L'utente può personalizzare la lista selezionando giorni o singole ricette, e adeguando il numero di persone per cui fare la spesa.",
      "architectural_pattern": "Pagina singola basata su React Server Components (RSC) che gestisce la logica di calcolo. L'interfaccia utente è delegata a Componenti Client interattivi. L'aggiornamento della lista avviene tramite ricaricamento della pagina con parametri URL.",
      "user_flow": [
        "1. L'utente naviga alla pagina '/shopping-list'.",
        "2. La pagina Server Component recupera l'ultimo piano alimentare dell'utente.",
        "3. La pagina calcola una lista della spesa iniziale basata sull'intero piano e la passa come prop ai componenti client.",
        "4. L'utente interagisce con `ShoppingListConfigurator` per cambiare il numero di persone o deselezionare ricette.",
        "5. Al click su 'Aggiorna Lista', il componente ricarica la pagina con i nuovi parametri nell'URL.",
        "6. Il server riesegue la logica con i nuovi parametri e renderizza la lista aggiornata."
      ],
      "core_components_interaction": {
        "src/app/shopping-list/page.tsx": "Pagina Server Component che orchestra il recupero dati, il calcolo e il rendering dei componenti figli.",
        "src/lib/shopping-list-generator.ts": "Servizio server-side che contiene la logica pura per aggregare ingredienti e scalare le quantità.",
        "src/components/features/shopping-list/ShoppingListConfigurator.tsx": "Componente Client per il form di configurazione.",
        "src/components/features/shopping-list/ShoppingListDisplay.tsx": "Componente Client per visualizzare la lista."
      },
      "database_interactions": [
        {
          "table": "meal_plans, recipes",
          "operation": "SELECT (Simulato)",
          "description": "Recupera l'ultimo piano e i dettagli delle ricette per raccogliere gli ingredienti."
        }
      ]
    }
  },
  "api_calls": [
    {
      "endpoint": "GET /api/user/preferences",
      "description": "Recupera le preferenze salvate per l'utente autenticato."
    },
    {
      "endpoint": "PUT /api/user/preferences",
      "description": "Crea/aggiorna le preferenze dell'utente."
    },
    {
      "endpoint": "POST /api/recipes/[recipeId]/favorite",
      "description": "Aggiunge o rimuove una ricetta dai preferiti dell'utente (logica toggle)."
    },
    {
      "endpoint": "DELETE /api/recipes/[recipeId]",
      "description": "Cancella una ricetta dal database. Richiede ruolo admin."
    },
    {
      "endpoint": "PATCH /api/meal-plan/meal/[mealId]",
      "description": "Sostituisce una ricetta specifica all'interno di un piano esistente."
    }
  ],
  "architecture_summary": "Architettura basata su Next.js App Router. Clerk per l'autenticazione. Database SQLite. Il flusso di generazione del piano è stato spostato server-side per robustezza, leggendo i parametri da URL. Le interazioni utente (preferiti, swap) usano API Routes dedicate."
}